// Generated by CoffeeScript 1.9.3
(function() {
  var $,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  Annotator.Plugin.Privacy = (function(superClass) {
    extend(Privacy, superClass);

    function Privacy() {
      this.updateField = bind(this.updateField, this);
      this.updateAutocompleteGroups = bind(this.updateAutocompleteGroups, this);
      this.setAnnotationGroups = bind(this.setAnnotationGroups, this);
      return Privacy.__super__.constructor.apply(this, arguments);
    }

    Privacy.prototype.options = {
      privacyClass: "annotator-privacy",
      publicClass: "annotator-privacy-public fa fa-unlock",
      privateClass: "annotator-privacy-private fa fa-lock"
    };

    Privacy.prototype.events = {
      'annotationEditorShown': "updateAutocompleteGroups"
    };

    Privacy.prototype.field = null;

    Privacy.prototype.input = null;

    Privacy.prototype.pluginInit = function() {
      if (!Annotator.supported()) {
        return;
      }
      return this.field = this.annotator.editor.addField({
        label: Annotator._t('Privacy: what groups should see your annotations?'),
        options: ['blue', 'pink', 'red']
      });
    };

    Privacy.prototype.setAnnotationGroups = function(field, annotation) {
      return annotation.groups = this.input.val();
    };

    Privacy.prototype.updateAutocompleteGroups = function(event, annotation) {
      var gid, group, groups, groups_html;
      groups_html = '';
      groups = Drupal.settings.annotator_groups;
      console.log(groups);
      for (gid in groups) {
        group = groups[gid];
        if (indexOf.call(groups, gid) < 0) {
          groups_html += '<span class="annotations-privacy-group' + gid + '">';
          groups_html += group;
          groups_html += '</span>';
          groups.gid = group;
        }
      }
      console.log(groups_html);
      return $(this.field).html(groups_html);
    };

    Privacy.prototype.updateViewer = function(field, annotation) {
      field = $(field);
      if (annotation.groups && $.isArray(annotation.groups) && annotation.groups.length) {
        return field.addClass('annotator-groups').html(function() {
          var string;
          return string = $.map(annotation.groups, function(group) {
            return '<span class="annotator-group">' + Annotator.Util.escape(group) + '</span>';
          }).join(' ');
        });
      } else {
        return field.remove();
      }
    };

    Privacy.prototype.updateField = function(field, annotation) {
      return console.log(field);
    };

    return Privacy;

  })(Annotator.Plugin);

}).call(this);
