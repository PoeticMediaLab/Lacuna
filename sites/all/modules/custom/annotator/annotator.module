<?php

define('ANNOTATOR_VERSION', '1.2.9');
define('WORKFLOW_READY_STATE', 3); // Workflow state "Ready to Annotate"
/**
 * Implements hook_init().
 */
function annotator_init() {
  if (user_access('administer annotations') || user_access('view annotations') || user_access('create annotations')) {
    /*TODO
    if (module_exists('locale')) {
      drupal_add_library('annotator', 'jsgettext', TRUE);
    }*/
    // Only load the annotator and its plugins if we are on an annotatable node
    if (annotator_check_annotatable_node()) {
      $library = libraries_load('annotator');
      if ($library['loaded'] == FALSE) {
        drupal_set_message($library['error message'], 'error');
        return 'Please download and install ' . l($library['name'], $library['download url']) . '!';
      }
      drupal_add_js(array('annotator' => array('element' => variable_get('annotator_element', '.node'))), 'setting');
      drupal_add_js(drupal_get_path('module', 'annotator') . '/js/annotator.js');
      drupal_add_css(drupal_get_path('module', 'annotator') . '/css/style.css');
      annotator_execute_plugins();
    }
  }
}

/**
 * Implements hook_permission().
 */
function annotator_permission() {
  // TODO
  return array(
    'create annotations' => array(
      'title' => t('Create annotations'),
      'description' => t('Allows users to create annotations.'),
      'restrict access' => FALSE,
    ),
    'view annotations' => array(
      'title' => t('View annotations'),
      'description' => t('Allows users to view annotations.'),
      'restrict access' => FALSE,
    ),
    'edit any annotations' => array(
      'title' => t('Edit any annotations'),
      'description' => t('Allows users to edit any annotations.'),
      'restrict access' => TRUE,
    ),
    'edit own annotations' => array(
      'title' => t('Edit own annotation'),
      'description' => t('Allows users to edit own annotations.'),
      'restrict access' => FALSE,
    ),
    'administer annotations' => array(
      'title' => t('Administer annotations'),
      'description' => t('Allows users to administer annotations.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function annotator_menu() {
  $items = array();
  $items['admin/config/content/annotator'] = array(
    'title' => 'Annotator',
    'description' => 'Configure Annotator settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('annotator_admin'),
    'access arguments' => array('administer annotations'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'annotator.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_library_info().
 */
function annotator_libraries_info() {
  $libraries['annotator'] = array(
    'name' => 'Annotator',
    'vendor url' => 'http://annotatorjs.org',
    'download url' => 'https://github.com/openannotation/annotator/releases/latest',
    'version arguments' => array(
      // 'file' => 'annotator-full.js',
      'file' => 'annotator-full.min.js',
      'pattern' => '@Annotator\sv(.*)@',
      'lines' => 10,
    ),
    'files' => array(
      'js' => array(
        'annotator-full.min.js',
        // 'annotator-full.js',
      ),
      'css' => array(
        'annotator.min.css',
      ),
    ),
    'variants' => array(
    ),
  );
  return $libraries;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function annotator_ctools_plugin_directory($module, $plugin) {
  if ($module == 'annotator') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function annotator_ctools_plugin_type() {
  return array(
    'annotator' => array(
      'cache' => FALSE,
    ),
  );
}

/**
 * Execute ctools plugins
 */
function annotator_execute_plugins($annotation = NULL, $op = NULL) {
  ctools_include('plugins');
  $annotator_plugins = variable_get('annotator_plugins', array());
  // Plugins can define a "weight" that controls when they're executed
  $plugin_weights = array();
  $plugins = array();
  // Load the plugins and determine what order to execute them
  foreach ($annotator_plugins as $name => $enabled) {
    if ((boolean) $enabled) {
      $plugin = ctools_get_plugins('annotator', 'annotator', $name . 'AnnotatorPlugin');
      $plugins[$name] = $plugin;
      if (array_key_exists('weight', $plugin)) {
        $plugin_weights[$name] = $plugin['weight'];
      }
      else {
        $plugin_weights[$name] = 0;
      }
    }
  }
  // Sort by weight
  asort($plugin_weights);
  // Now enable
  foreach ($plugin_weights as $name => $weight) {
    $plugin = $plugins[$name];
    $class = ctools_plugin_get_class($plugin, 'handler');
    if (class_exists($class)) {
      $instance = new $class($plugin);
      $instance->setup();
      if ($annotation && $op) {
        $instance->alter($annotation, $op);
      }
    }
  }
}

/**
 * Implements hook_TYPE_alter().
 */
function annotator_annotation_alter($entity, $op) {
  // Only load the annotator and its plugins if we are on an annotatable node
  if (annotator_check_annotatable_node()) {
    annotator_execute_plugins($entity, $op);
  }
}

/**
 * Check if we are currently on an annotatable node
 * If so, return the node.
 */
function annotator_check_annotatable_node() {
  if (arg(0) == 'node' && is_numeric (arg(1))) {
    $current_node = node_load(arg(1));
    $anno_ref_field = field_info_field('field_annotation_reference');
    $annotatable_types = $anno_ref_field['settings']['handler_settings']['target_bundles'];
    $workflow_state = workflow_node_current_state($current_node);
    // Account for nodes that don't have a workflow status
    if (in_array($current_node->type, $annotatable_types) && (empty($workflow_state) || $workflow_state == WORKFLOW_READY_STATE)) {
      return $current_node; // User is on an annotatable
    }
  }
	return FALSE;
}

/**
 * Implements hook_page_alter().
 */
function annotator_page_alter(&$page) {
	// Add the sidebar region for the Annotation Filters
	if (annotator_check_annotatable_node()) {
		$page['sidebar_second'] = array(
			'#markup' => '<span></span>'
		);
	}
}