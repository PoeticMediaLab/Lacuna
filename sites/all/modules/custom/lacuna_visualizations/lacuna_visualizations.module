<?php
/**
 * @file
 * Lacuna Stories module file. Displays a number of visualizations of
 * user data. Currently includes maps, journeys.
 *
 * Ben Allen <benallen@stanford.edu>
 * Mike Widner <mikewidner@stanford.edu>
 *
 */

// to install maps:
// 1. this one's simple. use drush to enable the module, make sure
// that d3.js is in /sites/all/libraries/d3, and it should work. by
// default it is displayed in /maps_view

// to install journeys:
// 0. install maps
// 1. import the view used to feed the visualization. save the output
// of this view to /misc/journeys.json
// 2. set up a cron job (I don't know how to do this) to get output
// from the view on a regular basis.

// to add a new visualization:
// 1. create directory for js in ./libraries. directory names must
// start with "d3."
// 2. create .info file in that directory. (see d3.maps for example).
// custom css / custom .tpl.php can be specified in files in the
// library's directory. (I believe; haven't tested yet)
// 3. add name of directory to the array below.
// 4. add an entry in lacuna_visualizations_menu
// 5. create callback function (lacuna_visualizations_responses is an
// example here) that uses EntityFieldQuery to pull in data and call
// graphapi functions (or just d3_draw).
// 6. remember to set the library name in $options.
// 7. wrap the javascript as described in the README.txt for the d3
// module (or just copy one of the extant modules, but remember to
// change the name of the function to match the name of the library
// directory (i.e. don't have journeys.js start with:

// (function($) {
// Drupal.d3.maps = function (select, settings) {

// (yes, this is a mistake I've made, and d3 will fail silently if you
// make this mistake.)

// 8. rejoice, for you you now have a new visualization.
//
// NOTE: remember to download d3.js and put it in
// /sites/all/libraries/d3, else the d3 module will, once again,  fail
// silently.  (also a mistake I've made... )

// helper callback to return all visualization libraries.
function lacuna_visualizations_default_libraries() {
	return array(
		'd3.maps',
		'd3.journeys',
    'd3.annotations_dashboard',
		);
}


/**
 * Implements hook_libraries_info_file_paths().
 */
function lacuna_visualizations_libraries_info_file_paths() {

  // Get all library directories.
  $libraries = libraries_get_libraries();

  $paths = array();
  // Output an array of paths to check for.
  foreach ($libraries as $path) {
    $paths[] = $path;
  }

  // Load the directory where the d3 example libraries are.
  $library_path = drupal_get_path('module', 'lacuna_visualizations') . '/libraries/';
  // Add these to the search directories for libraries.
  foreach (lacuna_visualizations_default_libraries() as $library) {
    $paths[] = $library_path . $library;
  }

  return $paths;
}


/**
 * Provides an array of d3 libraries.
 *
 * D3 libraries are going to have a prefix of d3., see README.txt
 * for information on creating a custom d3 library.
 */
function lacuna_visualizations_get_libraries() {

  static $d3_libraries;

  // Returns all libraries in the default folders.
  $libraries = libraries_info();

  foreach ($libraries as $library) {
    $library_name = $library['machine name'];
    // Filter out any other non-d3 library. All d3 libraries should have
    // the prefix "d3.".
    if (strpos($library_name, 'd3.') === FALSE) {
      continue;
    }
    // Do not list these default extension libraries.
    if (in_array($library_name, array('d3.extend', 'd3.tooltip', 'd3.drupal'))) {
      continue;
    }

    $d3_libraries[$library_name] = $library;
    $d3_libraries[$library_name]['js callback'] = str_replace('d3.', '', $library_name);
  }

  return $d3_libraries;
}


/**
 * Implements hook_libraries_info().
 */
function lacuna_visualizations_libraries_info() {

  $libraries = array();

  // Drupal ext adds behaviors and d3 global object.
  $libraries['d3.drupal'] = array(
    'name' => 'D3 Drupal ext',
    'vendor url' => 'http://drupal.org/sandbox/asherry/1477334',
    'files' => array(
      'js' => array(
        'd3.js',
      ),
    ),
    'path' => 'js',
    'library path' => drupal_get_path('module', 'lacuna_visualizations'),
    'dependencies' => array('d3'),
    'version' => '1',
  );

  // Path to library, (if installed).
  $path = libraries_get_path('d3');

  if ($path) {
    $files = array();
    // In the repository the files might me named d3.js and d3.min.js.
    $files += file_scan_directory($path, '/d3.js|d3.min.js/');
    // They could also have the version # in the file name.
    $files += file_scan_directory($path, '/d3.v[0-9](.min)?.js/');

    // If we don't have any files we shouldn't add the library at all.
    // This will fire drupal error and direct the user to reports.
    if (count($files) == 0) {
      return $libraries;
    }

    // This will be the default file.
    // @TODO: Add this to d3 settings so you can choose.
    $file = array_shift($files);
    $version = 0;

    // If this is a repository, there should be a package file. We can filter
    // out the version number.
    $package = file_exists($path . '/package.json') ? file_get_contents($path . '/package.json') : FALSE;
    if ($package) {
      preg_match('/\"version\"\:\ \"([0-9\.]*)\"/', $package, $version_matches);
      if (isset($version_matches[1])) {
        $version = $version_matches[1];
      }
    }
    // If this is from the zip file, we should be able to get the version
    // from the actual file itself.
    if (strpos($file->filename, '.v')) {
      preg_match('/\.v([0-9])/', $file->filename, $version_matches);
      if (isset($version_matches[1])) {
        $version = $version_matches[1];
      }
    }

    $libraries['d3'] = array(
      'name' => 'D3',
      'vendor url' => 'http://d3js.org/',
      'download url' => 'http://d3js.org/',
      'files' => array(
        'js' => array(
          $file->filename,
        ),
      ),
      'version' => $version,
    );
  }

  return $libraries;
}



/**
 * Implements hook_libraries_info_alter().
 */
function lacuna_visualizations_libraries_info_alter(&$libraries) {
  // Automatically add in the d3.drupal dependency so that each
  // d3.library doesn't have to.
  foreach (lacuna_visualizations_get_libraries() as $library_name => $library) {
    $libraries[$library_name]['dependencies'][] = 'd3.drupal';
  }
  // By default, the libraries module only checks the libraries folders.
  // We need to add this module's libraries path to the library info.
  $path = drupal_get_path('module', 'lacuna_visualizations') . '/libraries/';
  foreach (lacuna_visualizations_default_libraries() as $library_name) {
    // Change library path to path/to/module/d3/libraries
    $libraries[$library_name]['library path'] = $path . $library_name;
  }
}


/**
 * Implements hook_theme().
 */
function lacuna_visualizations_theme() {
  foreach (libraries_info() as $path => $library) {
    // Call this function to get all fields - i.e. library path.
    $library = libraries_load($path);
    // If a template was specified in the .info file or hook_libraries_info.
    if (isset($library['template'])) {
      // Change d3.[library name] to d3_[library name] for a theme key.
      $theme_key = str_replace('.', '_', $library['machine name']);
      $themes[$theme_key] = array(
        'template' => $library['template'],
        'path' => $library['library path'],
      );
    }
  }

  // template can be changed in the .info file for a library.
  $themes['d3'] = array(
    'variables' => array(),
    'template' => 'lacuna_visualizations',
  );

  $themes['d3_graphapi'] = array(
    'variables' => array(
      'graph' => NULL,
      'config' => NULL,
    ),
  );
  return $themes;
}



/**
 * Implements hook_menu().
 */
function lacuna_visualizations_menu() {
	return array(
    'visualization/responses' => array(
  	  'title' => 'Responses Map',
  	  'description' => 'Visualization showing links between responses and primary sources',
  	  'access arguments' => array('create response content'),
  	  'page callback' => 'lacuna_visualizations_responses',
  	  'type' => MENU_NORMAL_ITEM,
      'file' => 'lacuna_visualizations.responses.inc',
    ),
    'visualization/dashboard' => array(
      'title' => 'Annotations Dashboard',
      'description' => 'Visualization showing all annotations',
      'access arguments' => array('create annotations'),
      'page callback' => 'lacuna_visualizations_annotation_dashboard',
      'type' => MENU_NORMAL_ITEM,
      'file' => 'lacuna_visualizations.dashboard.inc',
    ),
    'visualization/dashboard/data.json' => array(
      'title' => 'Data for Annotations Dashboard',
      'description' => 'The json-formatted data for the Annotations Dashboard',
      'access arguments' => array('create annotations'),
      'page callback' => 'lacuna_visualizations_annotation_dashboard_data',
      'type' => MENU_CALLBACK,
      'file' => 'lacuna_visualizations.dashboard.inc',
    ),
    'admin/config/system/visualizations' => array(
      'title' => 'Dashboard Cache',
      'description' => 'Modify cache settings for the Annotations Dashboard',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('lacuna_visualizations_admin_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'lacuna_visualizations.admin.inc',
    ),
  );
}

// Implements hook_library()
// To load our vis-specific libraries
function lacuna_visualizations_library() {
  return array(
    'crossfilter' => array(
      'title' => 'Crossfilter',
      'website' => 'http://square.github.io/crossfilter/',
      'version' => '1.3.10',
      'js' => array(
        drupal_get_path('module', 'lacuna_visualizations') . '/libraries/crossfilter/crossfilter.min.js' => array(),
      )
    )
  );
}

/**
 * Implements hook_cron().
 */
function lacuna_visualizations_cron() {
  // Rebuild the Annotations Dashboard cached data for every course
  if (variable_get('lacuna_visualizations_cron', TRUE)) {
    module_load_include('inc', 'lacuna_visualizations', 'lacuna_visualizations.dashboard');
    // Load every course
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course')
      ->propertyCondition('status', NODE_PUBLISHED);
    $result = $query->execute();

    if (isset($result['node'])) {
      foreach (array_keys($result['node']) as $nid) {
        $data = lacuna_visualizations_annotation_dashboard_build_data($nid);
        lacuna_visualizations_annotation_dashboard_cache_set($nid, $data);
      }
    }
    watchdog('lacuna_visualizations', 'Rebuilt all dashboard data', array(), WATCHDOG_NOTICE);
  }
}
