<?php
/**
 * @file
 * Lacuna Stories module file. Displays a number of visualizations of
 * user data. Currently includes maps, journeys.
 *
 * Ben Allen <benallen@stanford.edu>
 * Mike Widner <mikewidner@stanford.edu>
 *
 */

// to install maps:
// 1. this one's simple. use drush to enable the module, make sure
// that d3.js is in /sites/all/libraries/d3, and it should work. by
// default it is displayed in /maps_view

// to install journeys:
// 0. install maps
// 1. import the view used to feed the visualization. save the output
// of this view to /misc/journeys.json
// 2. set up a cron job (I don't know how to do this) to get output
// from the view on a regular basis.

// to add a new visualization:
// 1. create directory for js in ./libraries. directory names must
// start with "d3."
// 2. create .info file in that directory. (see d3.maps for example).
// custom css / custom .tpl.php can be specified in files in the
// library's directory. (I believe; haven't tested yet)
// 3. add name of directory to the array below.
// 4. add an entry in lacuna_visualizations_menu
// 5. create callback function (lacuna_visualizations_mapview is an
// example here) that uses EntityFieldQuery to pull in data and call
// graphapi functions (or just d3_draw).
// 6. remember to set the library name in $options.
// 7. wrap the javascript as described in the README.txt for the d3
// module (or just copy one of the extant modules, but remember to
// change the name of the function to match the name of the library
// directory (i.e. don't have journeys.js start with:

// (function($) {
// Drupal.d3.maps = function (select, settings) {

// (yes, this is a mistake I've made, and d3 will fail silently if you
// make this mistake.)

// 8. rejoice, for you you now have a new visualization.
//
// NOTE: remember to download d3.js and put it in
// /sites/all/libraries/d3, else the d3 module will, once again,  fail
// silently.  (also a mistake I've made... )

// helper callback to return all visualization libraries.
function lacuna_visualizations_default_libraries() {
	return array(
		'd3.maps',
		'd3.journeys',
    'd3.annotations_dashboard',
		);
}


/**
 * Implements hook_libraries_info_file_paths().
 */
function lacuna_visualizations_libraries_info_file_paths() {

  // Get all library directories.
  $libraries = libraries_get_libraries();

  $paths = array();
  // Output an array of paths to check for.
  foreach ($libraries as $path) {
    $paths[] = $path;
  }

  // Load the directory where the d3 example libraries are.
  $library_path = drupal_get_path('module', 'lacuna_visualizations') . '/libraries/';
  // Add these to the search directories for libraries.
  foreach (lacuna_visualizations_default_libraries() as $library) {
    $paths[] = $library_path . $library;
  }

  return $paths;
}


/**
 * Provides an array of d3 libraries.
 *
 * D3 libraries are going to have a prefix of d3., see README.txt
 * for information on creating a custom d3 library.
 */
function lacuna_visualizations_get_libraries() {

  static $d3_libraries;

  // Returns all libraries in the default folders.
  $libraries = libraries_info();

  foreach ($libraries as $library) {
    $library_name = $library['machine name'];
    // Filter out any other non-d3 library. All d3 libraries should have
    // the prefix "d3.".
    if (strpos($library_name, 'd3.') === FALSE) {
      continue;
    }
    // Do not list these default extension libraries.
    if (in_array($library_name, array('d3.extend', 'd3.tooltip', 'd3.drupal'))) {
      continue;
    }

    $d3_libraries[$library_name] = $library;
    $d3_libraries[$library_name]['js callback'] = str_replace('d3.', '', $library_name);
  }

  return $d3_libraries;
}


/**
 * Implements hook_libraries_info().
 */
function lacuna_visualizations_libraries_info() {

  $libraries = array();

  // Drupal ext adds behaviors and d3 global object.
  $libraries['d3.drupal'] = array(
    'name' => 'D3 Drupal ext',
    'vendor url' => 'http://drupal.org/sandbox/asherry/1477334',
    'files' => array(
      'js' => array(
        'd3.js',
      ),
    ),
    'path' => 'js',
    'library path' => drupal_get_path('module', 'lacuna_visualizations'),
    'dependencies' => array('d3'),
    'version' => '1',
  );

  // Path to library, (if installed).
  $path = libraries_get_path('d3');

  if ($path) {
    $files = array();
    // In the repository the files might me named d3.js and d3.min.js.
    $files += file_scan_directory($path, '/d3.js|d3.min.js/');
    // They could also have the version # in the file name.
    $files += file_scan_directory($path, '/d3.v[0-9](.min)?.js/');

    // If we don't have any files we shouldn't add the library at all.
    // This will fire drupal error and direct the user to reports.
    if (count($files) == 0) {
      return $libraries;
    }

    // This will be the default file.
    // @TODO: Add this to d3 settings so you can choose.
    $file = array_shift($files);
    $version = 0;

    // If this is a repository, there should be a package file. We can filter
    // out the version number.
    $package = file_exists($path . '/package.json') ? file_get_contents($path . '/package.json') : FALSE;
    if ($package) {
      preg_match('/\"version\"\:\ \"([0-9\.]*)\"/', $package, $version_matches);
      if (isset($version_matches[1])) {
        $version = $version_matches[1];
      }
    }
    // If this is from the zip file, we should be able to get the version
    // from the actual file itself.
    if (strpos($file->filename, '.v')) {
      preg_match('/\.v([0-9])/', $file->filename, $version_matches);
      if (isset($version_matches[1])) {
        $version = $version_matches[1];
      }
    }

    $libraries['d3'] = array(
      'name' => 'D3',
      'vendor url' => 'http://d3js.org/',
      'download url' => 'http://d3js.org/',
      'files' => array(
        'js' => array(
          $file->filename,
        ),
      ),
      'version' => $version,
    );
  }

  return $libraries;
}



/**
 * Implements hook_libraries_info_alter().
 */
function lacuna_visualizations_libraries_info_alter(&$libraries) {
  // Automatically add in the d3.drupal dependency so that each
  // d3.library doesn't have to.
  foreach (lacuna_visualizations_get_libraries() as $library_name => $library) {
    $libraries[$library_name]['dependencies'][] = 'd3.drupal';
  }
  // By default, the libraries module only checks the libraries folders.
  // We need to add this module's libraries path to the library info.
  $path = drupal_get_path('module', 'lacuna_visualizations') . '/libraries/';
  foreach (lacuna_visualizations_default_libraries() as $library_name) {
    // Change library path to path/to/module/d3/libraries
    $libraries[$library_name]['library path'] = $path . $library_name;
  }
}


/**
 * Implements hook_theme().
 */
function lacuna_visualizations_theme() {
  foreach (libraries_info() as $path => $library) {
    // Call this function to get all fields - i.e. library path.
    $library = libraries_load($path);
    // If a template was specified in the .info file or hook_libraries_info.
    if (isset($library['template'])) {
      // Change d3.[library name] to d3_[library name] for a theme key.
      $theme_key = str_replace('.', '_', $library['machine name']);
      $themes[$theme_key] = array(
        'template' => $library['template'],
        'path' => $library['library path'],
      );
    }
  }

  // template can be changed in the .info file for a library.
  $themes['d3'] = array(
    'variables' => array(),
    'template' => 'lacuna_visualizations',
  );

  $themes['d3_graphapi'] = array(
    'variables' => array(
      'graph' => NULL,
      'config' => NULL,
    ),
  );
  return $themes;
}



/**
 * Implements hook_menu().
 */
function lacuna_visualizations_menu() {
	return array(
    'visualization/responses' => array(
  	  'title' => 'Responses Map',
  	  'description' => 'Visualization showing links between responses and primary sources',
  	  'access arguments' => array('create response content'),
  	  'page callback' => 'lacuna_visualizations_mapview',
  	  'type' => MENU_NORMAL_ITEM,
  	  ),
    'visualization/journey' => array(
  	  'title' => 'Journey view',
  	  'description' => 'Visualization showing student movement through the site',
  	  'access arguments' => array('create response content'),
  	  'page callback' => 'lacuna_visualizations_journeyview',
  	  'type' => MENU_NORMAL_ITEM,
  	),
    'visualization/dashboard' => array(
      'title' => 'Annotations Dashboard',
      'description' => 'Visualization showing all annotations',
      'access arguments' => array('create annotations'),
      'page callback' => 'lacuna_visualizations_annotation_dashboard',
      'type' => MENU_NORMAL_ITEM,
    ),
    'visualization/dashboard/data.json' => array(
      'title' => 'Data for Annotations Dashboard',
      'description' => 'The json-formatted data for the Annotations Dashboard',
      'access arguments' => array('create annotations'),
      'page callback' => 'lacuna_visualizations_annotation_dashboard_data',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Visualization showing links between student responses and primary
 * sources. (version I'm currently working on).
 */
function lacuna_visualizations_journeyview() {

  // BJA uses EntityFieldQuery to pull all the 'response' and 'document' nodes
  // BJA in the future, this should read from a view(?) rather than being
  // BJA hard-coded here.
  $responseQuery = new EntityFieldQuery();
    $responseQuery
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('biblio', 'response'));
  $result = $responseQuery->execute();
  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);

  $graph = graphapi_new_graph();
  foreach ($nodes as $item) {
  	$usersQuery = new EntityFieldQuery();
  	$usersQuery->entityCondition('entity_type', 'user');
  	$usersResult = $usersQuery->execute();
  	$uids = array_keys($usersResult['user']);
  	$users = user_load_multiple($uids);

  	 // this array will eventually contain all relevant info about responses and document: author, timestamp, etc.
  	 // added to nodes before graphapi passes off to d3.
    $dataArray = array(
      'itemType' => $item->type,
  		// author set below -- $item->name for responses, but
  		// more complicated for biblio entries.
  		'author'	=> ' ',
      'title'     => $item->title,
      'linksTitles'     => array(),
      'thisURL'   => $GLOBALS['base_url'] . "/node/" . $item->nid,
      'linksURL' => array(),
  		'biblio' => array(),
  		'document_abstract' => '',
  		'date' => $item->created,
    );

  		// added to all links before graphapi passes off to d3.
  		// Currently only contains a date (the time that the source
  		// node was created; currently assuming that all links are
  		// created at the same time as the response they're
  		// associated with.
    if (!$dataArray['author']) {
      $dataArray['author'] = "None";
    }

    $title = $item->title;

  		/* pull out data needed for biblio nodes and add it to
  		 * $dataArray */
  	if ($item->type == "biblio") {
  		$document_abstract = strip_tags($item->field_biblio_hover_abstract);
  		$dataArray['document_abstract'] = $document_abstract;
  		$author = ' ';
  		if (isset($item->biblio_contributors[0])) {
  			$count = count($item->biblio_contributors);
  			for ($i = 0; $i < $count; $i++) {
  				$author = $item->biblio_contributors[0]['name'];
  				$dataArray['author'] .= $author . "\r\n";
  			}
  		}
  	}
    if ($item->type == "response") {

  		$dataArray['author'] = $users[$item->uid]->field_display_name->und[0].safe_value;

  		// draw links based off of node's field_bibliographic_entry.
      if ($item->field_bibliographic_entry) {
        $linkArray = $item->field_bibliographic_entry;
        for ($i = 0; $i < count($linkArray[LANGUAGE_NONE]); $i++) {
          $linkedNid = $linkArray[LANGUAGE_NONE][$i]['target_id'];
          if (array_key_exists($linkedNid, $nodes)) {
            graphapi_add_link($graph, $title, $nodes[$linkedNid]->title);
            array_push($dataArray['linksTitles'], $nodes[$linkedNid]->title);
            array_push($dataArray['linksURL'], $GLOBALS['base_url'] . '/node/' . $linkedNid);
  //			graphapi_set_link_data($graph, $title,	$nodes[$linkedNid]['title'], $item->created);
          }
        }
      } // end if($item->field_bibliographic_entry)

/*			if($item->field_bibliographic_entry){
				print_r($item->field_bibliographic_entry);
			//	echo "<br />";
              for($i = 0; $i < count($item->field_bibliographic_entry[LANGUAGE_NONE]); $i++) {

				  // so this is the nid of the bibliographic reference.
				  // print_r($item->field_bibliographic_entry[LANGUAGE_NONE][$i]['target_id']);
				  $bibnid = $item->field_bibliographic_entry[LANGUAGE_NONE][$i]['target_id'];
				  // echo "<br />";
				  // print_r($bibnid);
				  if(array_key_exists($bibnid, $nodes))
					  // RESTART HERE
					  // This is the title of the bibliographic
					  // reference, which (should be) the same as the
					  // title of the node that we're actually linking
					  // to.

					  // wait.
					  // we should link to the bibliographic reference
					  // rather than to the actual document. duh.
					  print_r($nodes[$bibnid]);
					  echo "<br />";
				  }
			  } */
        }	// end if($item->type == "response")
        graphapi_set_node_data($graph, $title, $dataArray);
    }

	// settings.config
  $options = array(
    'width' => 600,
    'height' => 500,
    'item-width' => 45,
    'engine' => 'd3',
  	'library' => 'journeys',
  	'testString' => "TEST STRING",
  	'userList' => $users,
  	'drawDocumentCircle' => true,
  );
  return theme('graphapi_dispatch', array('graph' => $graph, 'config' => $options));
}  // end function lacuna_visualizations_journeyview()

function get_document_id_for_biblio($nid) {
  //Find appropriate material for that biblio entry.
  $docQuery = new EntityFieldQuery();
  $docQuery
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document')
    ->fieldCondition('field_bibliographic_entry', 'target_id', $nid, '=');
  $docResult = $docQuery->execute();
  if (count($docResult['node'])>0){
    $results = array_keys($docResult['node']);
    // PHP 5.3 won't dereference arrays from functions directly
    return $results[0];
  }
  else {
    return null;
  }
}

function get_link_url($docId, $nid) {
  if ($docId != null){
    return $GLOBALS['base_url'] . '/node/' . $docId;
  }
  else {
    return $GLOBALS['base_url'] . '/node/' . $nid;
  }
}

function get_image($item, $docId) {
  if ($item->type == "biblio") {
    if ($docId != null) {
      $node = node_load($docId);
      // var_dump($node->field_image);
      return '<center>'.theme('image_style', array('style_name' => 'thumbnails_for_browsing', 'path' => $node->field_image[LANGUAGE_NONE][0]['uri'])).'</center>';
    }
  }
  else if ($item->type == "response") {
    return '<center>'.theme('image_style', array('style_name' => 'thumbnails_for_browsing', 'path' => $item->field_image[LANGUAGE_NONE][0]['uri'])).'</center>';
  }
  return "";
}

/**
 * Visualization showing links between student responses and primary
 * sources.
 */
function lacuna_visualizations_mapview() {

  $graph = graphapi_new_graph();

  $responseQuery = new EntityFieldQuery();
  $responseQuery
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', array('biblio', 'response'));
  $result = $responseQuery->execute();
  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);

  foreach ($nodes as $item) {
	 // this array will eventually contain all relevant info about responses and document: author, timestamp, etc.
	 // added to nodes before graphapi passes off to d3.
    $docId = get_document_id_for_biblio($item->nid);
    // var_dump($docId);
    $dataArray = array(
      'itemType' => $item->type,
      // author set below -- $item->name for responses, but
      // more complicated for biblio entries.
      'author'=> null,
      'u_id' => $item->uid,
      'title' => $item->title,
      'linksTitles' => array(),
      'thisURL' => get_link_url($docId, $item->nid),
      'image' => get_image($item, $docId),
      'linksURL' => array(),
      'biblio' => array(),
      'document_abstract' => null,
      'date' => $item->created,
    );

		// added to all links before graphapi passes off to d3.
		// Currently only contains a date (the time that the source
		// node was created; currently assuming that all links are
		// created at the same time as the response they're
		// associated with.
    $title = $item->title;
		/* pull out data needed for biblio nodes and add it to
		 * $dataArray */
		if ($item->type == "biblio") {
			$document_abstract = strip_tags($item->biblio_abst_e);
			$dataArray['document_abstract'] = $document_abstract;
			$author = ' ';
			if (isset($item->biblio_contributors[0])) {
				$count = count($item->biblio_contributors);
				for ($i = 0; $i < $count; $i++) {
					$author = $item->biblio_contributors[$i]['name'];
					$dataArray['author'] .= $author;
          if ($i != $count-1) {
             $dataArray['author'] .= "; ";
          }
          else {
            $dataArray['author'] .= " (" . $item->biblio_year . ")";
          }
				}
			}
			else {
     				$dataArray['author'] = "None";
			}
		}

    if ($item->type == "response") {
			$dataArray['author'] = $item->name;

			// draw links based off of node's field_bibliographic_entry.
      if ($item->field_bibliographic_entry) {
        $linkArray = $item->field_bibliographic_entry;
        for ($i = 0; $i < count($linkArray[LANGUAGE_NONE]); $i++) {
          $linkedNid = $linkArray[LANGUAGE_NONE][$i]['target_id'];
          if (array_key_exists($linkedNid, $nodes)) {
            graphapi_add_link($graph, $title, $nodes[$linkedNid]->title);
            array_push($dataArray['linksTitles'], $nodes[$linkedNid]->title);
            array_push($dataArray['linksURL'], $GLOBALS['base_url'] . '/node/' . $linkedNid);
          	graphapi_set_link_data($graph, $title,	$nodes[$linkedNid]->title, $item->created);
          }
        }
      } // end if($item->field_bibliographic_entry)
    }	// end if($item->type == "response")
    graphapi_set_node_data($graph, $title, $dataArray);
  }

  $usersQuery = new EntityFieldQuery();
  $usersQuery->entityCondition('entity_type', 'user');
  $usersResult = $usersQuery->execute();
  $uids = array_keys($usersResult['user']);
  $users = array();
  if (!empty($uids)) {
    $users = user_load_multiple($uids);
  }
	// settings.config
  $options = array(
    'width' => 800,
    'height' => 600,
    'item-width' => 45,
    'engine' => 'd3',
  	'library' => 'maps',
  	'userList' => $users,
  	'drawDocumentCircle' => true,
  );
  return theme('graphapi_dispatch', array('graph' => $graph, 'config' => $options));
}  // end function lacuna_visualizations_mapview()

// Implements hook_library()
// To load our vis-specific libraries
function lacuna_visualizations_library() {
  return array(
    'crossfilter' => array(
      'title' => 'Crossfilter',
      'website' => 'http://square.github.io/crossfilter/',
      'version' => '1.3.10',
      'js' => array(
        drupal_get_path('module', 'lacuna_visualizations') . '/libraries/crossfilter/crossfilter.min.js' => array(),
        '//cdn.datatables.net/1.10.2/js/jquery.dataTables.min.js' => array(
          'type' => 'external'),
      )
    )
  );
}

function lacuna_visualizations_annotation_dashboard() {
  // Load the dashboard visualization
  global $base_url;
    // settings.config
  $settings = array(
    'config' => array(
      'size' => array(
        'graph' => array(
          'width' => 800,
          'height' => 5000,
        ),
      ),
      'data_url' => $base_url . '/visualization/dashboard/data.json',
    ),
    'id' => 'annotations_dashboard',
    'type' => 'annotations_dashboard',
  );
  drupal_add_js($settings, 'setting');
  // Dashboard uses Crossfilter and DataTables
  drupal_add_css('//cdn.datatables.net/1.10.2/css/jquery.dataTables.css', 'external');
  drupal_add_library('lacuna_visualizations', 'crossfilter', FALSE);
  // We don't need the Graph API for this part, so go straight to d3
  return d3_draw($settings);
  // return theme('graphapi_dispatch', array('graph' => null, 'config' => $settings));
}

// TODO: Improve performance - this function is really slow
function lacuna_visualizations_annotation_dashboard_data() {
  // Prepare the data for the dashboard, output as JSON
  global $user;

  // Query all annotations with no access checks
  // $query = new EntityFieldQuery();
  // $result = $query->entityCondition('entity_type', 'node')
  //     ->entityCondition('bundle', 'annotation')
  //     ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
  //     ->execute();

  $result = db_query("SELECT nid FROM {node} WHERE type = :type", array(
  ':type' => 'annotation'));

  if ($result) {
    $all = array();
    foreach ($result->fetchAll() as $row) {
      array_push($all, $row->nid);
    }
  }


  $canReadAll = user_access('access any private annotation');
  $documentNames = array(); // to cut down on db queries
  $userNames = array();   // same as previous - only load users once
  $annotations = array();

  // Fields need for db query:
  // created, uid, annotation_reference, text, quote, private, annotation_tags, category
  $allNodes = node_load_multiple($all);

  foreach ($allNodes as $annotation) {
    // Create a new data object, populate only with necessary data
    // Make it harder to leak unintended data
    $data = new StdClass();
    $data->id = $annotation->nid;
    $data->created = $annotation->created * 1000; // convert to milliseconds for d3
    $data->updated = $annotation->changed * 1000;
    $data->u_id = $annotation->uid;

    // For readability
    $target_id = $annotation->field_annotation_reference[$annotation->language][0]['target_id'];
    $data->doc_id = $target_id;
    if (!array_key_exists($target_id, $documentNames)) {
      $document = node_load($target_id);
      // TODO: use Biblio reference short title instead
      // TODO: check that something is returned
      $documentNames[$target_id] = $document->title;
    }
    $data->documentTitle = $documentNames[$target_id];

    // Convert from Drupal format to a simpler data format for viz
    // TODO: Refactor the next two loops into a single function
    // Put function in a helper library for general use here and Annotation Store

    $fields = array('text', 'quote', 'private');
    foreach ($fields as $field) {
      if (isset($annotation->{$field}[$annotation->language][0]['value'])) {
        $data->{$field} = $annotation->{$field}[$annotation->language][0]['value'];
      }
    }
    $data->field_annotation_private ? $data->field_annotation_private = 'Private' : $data->field_annotation_private = 'Public';
    // TODO: Refactor "annotation_tags" to be "tags" -- must wait until 1.0
    // Not a good idea to change it for existing alpha or beta sites
    $fields = array('field_annotation_tags', 'field_annotation_category');
    foreach ($fields as $field) {
      $data->{$field} = array();
      if (isset($annotation->{$field}[$annotation->language][0]['tid'])) {
        foreach ($annotation->{$field}[$annotation->language] as $tag) {
          $term = taxonomy_term_load($tag['tid']);
          array_push($data->{$field}, $term->name);
        }
      }
    }
    if ($data->category) {
      $data->category = $data->category[0];
    }
    // Secure fields of private annotations, usernames, etc.
    $isPrivate = $annotation->field_annotation_private[$annotation->language][0]['value'];
    if (!$canReadAll && ($annotation->uid != $user->uid)) {
      if ($isPrivate) {
        $data->text = "";
        $data->quote = "";
        $data->annotation_tags = Array();
      }
      if (!array_key_exists($annotation->uid, $userNames)) {
        // anonymize with slight UID obfuscation
        // should use a hash or something to make it harder to decipher
        // but "view user profile" permissions *should* be limited anyway
        $userNames[$annotation->uid] = "Student #1" . $annotation->uid;
      }
    }
    elseif ($canReadAll || $annotation->uid == $user->uid) {
      if (!array_key_exists($annotation->uid, $userNames)) {
        $userNames[$annotation->uid] = format_username(user_load($annotation->uid));
      }
    }
    $data->username = $userNames[$annotation->uid];
    array_push($annotations, $data);
  }
  drupal_json_output($annotations);
  drupal_exit();
}
